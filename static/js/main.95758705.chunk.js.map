{"version":3,"sources":["Modules/main/not-found.jpg","Enhancers/monitorReducer.js","Reducers/settings.js","Reducers/notes.js","Reducers/index.js","Reducers/configureStore.js","Common/routes/TestRoute.js","Modules/main/NotFound.js","Common/routes/RoutesList.js","Modules/main/Main.js","serviceWorker.js","index.js","Common/locales/translations.js"],"names":["module","exports","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","state","action","number","start","performance","now","newState","end","diff","Math","round","console","log","settings","type","language","darkMode","autosave","saveAndCreateNew","list","title","content","pinned","dateAdded","dateEdited","tags","combineReducers","notes","i18nState","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","TestRoute","props","NotFound","_props","context","translate","t","class","src","NotFoundImg","alt","href","contextTypes","PropTypes","RoutesList","path","exact","Main","className","Boolean","window","location","hostname","match","preloadedState","middlewares","process","thunkMiddleware","filter","enhancers","applyMiddleware","monitorReducersEnhancer","composedEnhancers","compose","store","persistor","persistStore","configureStore","ReactDOM","render","StrictMode","loading","translations","initialLang","detectBrowserLanguage","fallbackLang","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.95758705.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/not-found.856270e2.jpg\";","const round = (number) => Math.round(number * 100) / 100;\n\nconst monitorReducerEnhancer = (createStore) => (\n  reducer,\n  initialState,\n  enhancer\n) => {\n  const monitoredReducer = (state, action) => {\n    const start = performance.now();\n    const newState = reducer(state, action);\n    const end = performance.now();\n    const diff = round(end - start);\n\n    console.log(\"reducer process time:\", diff);\n\n    return newState;\n  };\n\n  return createStore(monitoredReducer, initialState, enhancer);\n};\n\nexport default monitorReducerEnhancer;\n","const settings = (state = [], action) => {\n  switch (action.type) {\n    default:\n      return {\n        language: 'browser',\n        darkMode: 'browser',\n        autosave: true,\n        saveAndCreateNew: true,\n      }\n  }\n}\n\nexport default settings\n","const settings = (state = [], action) => {\n  switch (action.type) {\n    default:\n      return {\n        list: [\n          {\n            title: 'Hello world',\n            content: 'hey hey hey',\n            pinned: true,\n            dateAdded: '2020-04-26T12:54:13.261Z',\n            dateEdited: '2020-04-26T12:54:13.261Z',\n            tags: ['hello', 'world'],\n          },\n        ],\n      }\n  }\n}\n\nexport default settings\n","import { i18nState } from 'redux-i18n'\nimport { combineReducers } from 'redux'\n\nimport settings from './settings'\nimport notes from './notes'\n\nexport default combineReducers({\n  settings,\n  notes,\n  i18nState,\n})\n","import { applyMiddleware, compose, createStore } from 'redux'\nimport thunkMiddleware from 'redux-thunk'\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\n\nimport monitorReducersEnhancer from 'Enhancers/monitorReducer'\nimport loggerMiddleware from 'Middleware/logger'\nimport rootReducer from '.'\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n}\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\n\nexport default function configureStore(preloadedState) {\n  const middlewares = [\n    process.env.NODE_ENV === 'development' && loggerMiddleware,\n    thunkMiddleware,\n  ].filter(Boolean)\n\n  const middlewareEnhancer = applyMiddleware(...middlewares)\n\n  const addReduxDevtoolsInDevMode =\n    process.env.NODE_ENV === 'development' &&\n    window.__REDUX_DEVTOOLS_EXTENSION__ &&\n    window.__REDUX_DEVTOOLS_EXTENSION__()\n\n  const enhancers = [middlewareEnhancer, monitorReducersEnhancer, addReduxDevtoolsInDevMode].filter(\n    Boolean,\n  )\n  const composedEnhancers = compose(...enhancers)\n\n  let store = createStore(persistedReducer, preloadedState, composedEnhancers)\n\n  let persistor = persistStore(store)\n\n  return { store, persistor }\n}\n","const TestRoute = (props) => {\n  return props.title\n}\n\nexport default TestRoute\n","import React from 'react'\nimport * as PropTypes from 'prop-types'\nimport NotFoundImg from './not-found.jpg'\n\nconst NotFound = (_props, context) => {\n  const { t: translate } = context\n\n  return (\n    <div class=\"center\">\n      <div class=\"no-javascript\">\n        <img\n          src={NotFoundImg}\n          alt={translate('An nonsense illustration from absurd.design', {}, 'image credits')}\n        />\n        <br />\n        {translate('Page not found', {}, '404 main text')} <br />\n        <a href=\"/\">{translate('Go to home', {}, 'image credits')}</a>\n      </div>\n    </div>\n  )\n}\n\nNotFound.contextTypes = {\n  t: PropTypes.func,\n}\n\nexport default NotFound\n","import React from 'react'\n\nimport { Switch, Route } from 'react-router-dom'\nimport TestRoute from './TestRoute'\nimport NotFound from 'Modules/main/NotFound'\n\nconst RoutesList = () => (\n  <Switch>\n    <Route path=\"/new\" exact={true}>\n      <TestRoute title=\"Create a new note\" />\n    </Route>\n    <Route path=\"/settings\" exact={true}>\n      <TestRoute title=\"settings page\" />\n    </Route>\n    <Route path=\"/shortcuts\" exact={true}>\n      <TestRoute title=\"shortcuts page\" />\n    </Route>\n    <Route path=\"/\" exact={true}>\n      <TestRoute title=\"List all notes\" />\n    </Route>\n\n    <Route path=\"*\" exact={true}>\n      <NotFound />\n    </Route>\n  </Switch>\n)\n\nexport default RoutesList\n","import React from 'react'\nimport * as PropTypes from 'prop-types'\nimport './Main.scss'\nimport 'react-tippy/dist/tippy.css'\n\nimport RoutesList from '../../Common/routes/RoutesList'\n\nconst Main = (_props, context) => {\n  // const { t: translate } = context\n\n  return (\n    <div className=\"App\">\n      {/* {translate('Hello world', {}, 'Testing the translation system')} */}\n      <RoutesList />\n    </div>\n  )\n}\n\nMain.contextTypes = {\n  t: PropTypes.func,\n}\n\nexport default Main\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { HashRouter } from 'react-router-dom'\nimport I18n from 'redux-i18n'\nimport detectBrowserLanguage from 'detect-browser-language'\nimport { PersistGate } from 'redux-persist/integration/react'\n\nimport { translations } from 'Common/locales/translations'\nimport configureStore from 'Reducers/configureStore'\nimport Main from 'Modules/main/Main'\n\nimport './index.css'\nimport * as serviceWorker from './serviceWorker'\n\nconst { store, persistor } = configureStore()\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <I18n translations={translations} initialLang={detectBrowserLanguage()} fallbackLang=\"en\">\n          <HashRouter>\n            <Main />\n          </HashRouter>\n        </I18n>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","export const translations = {\n  'en': {\n    'Hello world': 'Testing translations II - The revenge',\n  },\n  'options': {\n    'plural_rule': 'n != 1',\n    'plural_number': '2',\n  },\n}\n"],"sourceRoot":""}